package ch.heigvd.storagemalware.web.filters;

import javax.servlet.Filter;
import javax.servlet.*;
import javax.servlet.http.HttpServletRequest;
import java.io.IOException;

/**
 * This class implements the Filter interface defined in the Servlet API. A
 * filter is a component that is placed in the (HTTP) request processing
 * pipeline. It can inspect and manipulate both the request (on the way in) and
 * the response (on the way out).
 * <p>
 * The responsibility of this class is to handle authorization of HTTP requests
 * issued by clients. The security policy is defined as follows: - all pages of
 * the application are protected and can be accessed only if the the user has
 * successfully authenticated. If that is the case, then there must be an object
 * named "principal" stored in the HTTP session. - static content (css,
 * javascript, etc.) is not protected - the login page, which displays the login
 * form, is not protected - the authentication servlet, which processes data
 * entered in the login form, is not protected either
 * <p>
 * These rules are enforced in the method. Note that there is no actual password
 * verification. Any password will be accepted in this illustrative scenario.
 *
 * @author Olivier Liechti (olivier.liechti@heig-vd.ch)
 * Modified by Tano Iannetta and Wojciech Myzskorowski
 */
public class SecurityFilter implements Filter {

    /**
     * @param request  The servlet request we are processing
     * @param response The servlet response we are creating
     * @param chain    The filter chain we are processing
     * @throws IOException      if an input/output error occurs
     * @throws ServletException if a servlet error occurs
     */
    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {

        HttpServletRequest httpRequest = (HttpServletRequest) request;
        String path = httpRequest.getRequestURI().substring(httpRequest.getContextPath().length());
        String parameter = httpRequest.getQueryString();

        // We apply a black list to protect few pages
        boolean isTargetUrlProtected = false;

        // append parameter to the request if there is any
        if (parameter != null) {
            path = path + "?" + parameter;
        }
        /*
         * If the target URL is one of the protected content we block access
         * if the user has not been authenticated.
         */
        if ("/generate".equals(path) || path.equals("/creation") ||
                path.startsWith("/edit") || path.startsWith("/delete")) {
        /*
         * Let's imagine that the user has sent a request to a protected page before logging into the
         * application. In that case, we want to route the user to the login page. If he provides valid
         * credentials, then we then want to redirect the user to the given page. In order to do that,
         * we need to save the target URL
         */
            isTargetUrlProtected = true;
            request.setAttribute("targetUrl", path);
        }
        /*
         * If the user has been authenticated before, then the AuthenticationServlet has placed
         * an object (in this case a String) in the HTTP session. We can retrieve it.
         */
        String principal = (String) httpRequest.getSession().getAttribute("principal");
        if (principal == null && isTargetUrlProtected) {
          /*
           * The user has not been authenticated and tries to access a protected resource,
           * we display the login page (and interrupt the request processing pipeline).
           */
            request.getRequestDispatcher("/WEB-INF/views/login.jsp").forward(request, response);
        } else {
          /*
           * We authorize the access, so we can tell the request processing pipeline to
           * continue its work.
           */
            chain.doFilter(request, response);
        }

    }

    @Override
    public void init(FilterConfig filterConfig) throws ServletException {
    }

    @Override
    public void destroy() {
    }

}
