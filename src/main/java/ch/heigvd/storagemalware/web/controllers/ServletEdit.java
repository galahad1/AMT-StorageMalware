package ch.heigvd.storagemalware.web.controllers;

import ch.heigvd.storagemalware.models.Malware;
import ch.heigvd.storagemalware.services.MalwareCreationLocal;
import ch.heigvd.storagemalware.services.MalwareManagerLocal;

import javax.ejb.EJB;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static ch.heigvd.storagemalware.models.ValidatorForm.validateMalware;

/**
 * Servlet which handle edit page
 *
 * @author Tano Iannetta and Wojciech Myszkorowki
 */
@WebServlet("/edit")
public class ServletEdit extends HttpServlet {

    @EJB
    MalwareCreationLocal malwareCreationLocal; // service of creation
    @EJB
    MalwareManagerLocal malwareManagerLocal; // dao

    private static final String CHAMP_NOM = "name";
    private static final String CHAMP_HASH = "hash";
    private static final String CHAMP_CATEGORY = "category";
    private static final String CHAMP_DATE = "date";

    /**
     * Display a malware in an edit form from the database given by his id
     *
     * @param request  servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException      if an I/O error occurs
     */
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

        try {
            // id of malware to modify
            Long id = Long.valueOf(request.getParameter("id"));
            Malware malwareToEdit = malwareManagerLocal.getMalware(id);

            // attributs to fill fields
            request.setAttribute("id", malwareToEdit.getId());
            request.setAttribute("name", malwareToEdit.getName());
            request.setAttribute("hash", malwareToEdit.getHash());
            request.setAttribute("category", malwareToEdit.getCategory());
            request.setAttribute("date", malwareToEdit.getDate());
            // display edit page
            request.getRequestDispatcher("/WEB-INF/views/edit.jsp").forward(request, response);

        } catch (NumberFormatException e) {
            e.printStackTrace();
        }
    }

    /**
     * Edit a malware from the database given by his id
     *
     * @param request  servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException      if an I/O error occurs
     */
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

        //int currentPage = Integer.parseInt(request.getParameter("page"));
        try {
            // process values of fields
            Long id = Long.valueOf(request.getParameter("id"));
            System.out.println(id);

            String name = request.getParameter(CHAMP_NOM);
            String hash = request.getParameter(CHAMP_HASH);
            String category = request.getParameter(CHAMP_CATEGORY);
            String creation = request.getParameter(CHAMP_DATE);

            Malware inputCheck = new Malware(null, name, hash, category, creation);

            Map<String, String> errors = new HashMap<>();


            validateMalware(name, hash, category, creation, errors);

            // error in form
            if (errors.size() != 0) {
                request.setAttribute("form", errors);
                request.setAttribute("id", id);
                request.setAttribute("name", inputCheck.getName());
                request.setAttribute("hash", inputCheck.getHash());
                request.setAttribute("category", inputCheck.getCategory());
                request.setAttribute("date", inputCheck.getDate());
                request.getRequestDispatcher("/WEB-INF/views/edit.jsp").forward(request, response);
            } else {
                //request.setAttribute("currentPage", currentPage);
                // update malware with new values
                Malware newMalware = malwareCreationLocal.createMalware(name, hash, category, creation);
                malwareManagerLocal.updateMalware(id, newMalware.getName(), newMalware.getHash(), newMalware.getCategory(), newMalware.getDate());
                response.sendRedirect("./home");
            }

        } catch (NumberFormatException e) {
            e.printStackTrace();
        }

    }
}
