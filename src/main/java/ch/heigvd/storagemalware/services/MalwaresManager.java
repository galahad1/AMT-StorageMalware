package ch.heigvd.storagemalware.services;

import ch.heigvd.storagemalware.models.Malware;

import javax.annotation.Resource;
import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * DAO to interact with the database
 */
@Stateless
public class MalwaresManager implements MalwaresManagerLocal {

    @Resource(lookup = "java:/jdbc/malware")
    private DataSource dataSource;

    @Override
    public Malware getMalware(Long id) {

        Malware malware = null;

        try {
            Connection connection = dataSource.getConnection();
            PreparedStatement pstmt = connection.prepareStatement("SELECT * FROM malware WHERE malware_id = ?");
            pstmt.setLong(1, id);
            ResultSet rs = pstmt.executeQuery();
            while (rs.next()) {
                String name = rs.getString("name");
                String hash = rs.getString("hash");
                String category = rs.getString("category");
                String creation = rs.getString("creation");
                malware = new Malware(id, name, hash, category, creation);
            }
            connection.close();
        }catch (SQLException e) {
            e.printStackTrace();
        }
        return malware;
    }

    /**
     * Ask dao service to get all malware in the database
     * @return list of malwares
     */
    @Override
    public List<Malware> getAllMalwares() {
        List<Malware> malwareList = new ArrayList<>();
        try {
            Connection connection = dataSource.getConnection();
            PreparedStatement pstmt = connection.prepareStatement("SELECT * FROM malware");
            ResultSet rs = pstmt.executeQuery();
            while (rs.next()) {
                long id = rs.getLong("malware_id");
                String name = rs.getString("name");
                String hash = rs.getString("hash");
                String category = rs.getString("category");
                String creation = rs.getString("creation");
                malwareList.add(new Malware(id, name, hash, category, creation));
            }
            connection.close();
        }catch (SQLException e) {
            e.printStackTrace();
        }
        return malwareList;
    }

    @Override
    public List<Malware> getSomeMalware(int limit, int offset) {
        List<Malware> malwareList = new ArrayList<>();
        try {
            Connection connection = dataSource.getConnection();
            PreparedStatement pstmt = connection.prepareStatement("SELECT * FROM malware LIMIT ? OFFSET ?");
            pstmt.setInt(1, limit);
            pstmt.setInt(2, offset);
            ResultSet rs = pstmt.executeQuery();
            while (rs.next()) {
                long id = rs.getLong("malware_id");
                String name = rs.getString("name");
                String hash = rs.getString("hash");
                String creation = rs.getString("creation");
                String category = rs.getString("category");
                malwareList.add(new Malware(id, name, hash, category, creation));
            }
            connection.close();
        }catch (SQLException e) {
            e.printStackTrace();
        }
        return malwareList;
    }

    /**
     * Ask dao service to store a malware in the database
     * @param malware to store
     */
    @Override
    public void storeMalware(Malware malware) {
        try {
            Connection connection = dataSource.getConnection();
            PreparedStatement pstmt = connection.prepareStatement("INSERT INTO malware (name, hash, category, creation) " +
                    "VALUES (?,?,?,?)");
            pstmt.setString(1, malware.getName());
            pstmt.setString(2,malware.getHash());
            pstmt.setString(3,malware.getCategory());
            pstmt.setString(4,malware.getDate());
            pstmt.execute();
            connection.close();
        }catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void storeListMalware(List<Malware> malwareList) {
        try {
            Connection connection = dataSource.getConnection();

            for (Malware malware : malwareList) {
                PreparedStatement pstmt = connection.prepareStatement("INSERT INTO malware (name, hash, category, creation) " +
                        "VALUES (?,?,?,?)");
                pstmt.setString(1, malware.getName());
                pstmt.setString(2,malware.getHash());
                pstmt.setString(3,malware.getCategory());
                pstmt.setString(4,malware.getDate());
                pstmt.execute();
            }
            connection.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void updateMalware(Long id, String name, String hash, String category, String date) {

        try {
            Connection connection = dataSource.getConnection();
            PreparedStatement pstmt = connection.prepareStatement("UPDATE malware SET name = ?, hash = ?, category = ?, creation = ?" +
                    "WHERE malware_id = ? ");

            pstmt.setString(1, name);
            pstmt.setString(2,hash);
            pstmt.setString(3,category);
            pstmt.setString(4,date);
            pstmt.setLong(5, id);
            pstmt.execute();
            connection.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void deleteMalware(Long id) {
        try {
            Connection connection = dataSource.getConnection();
            PreparedStatement pstmt = connection.prepareStatement("DELETE FROM malware WHERE malware_id = ? ");
            pstmt.setLong(1, id);
            pstmt.execute();
            connection.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public int getSizeDB() {
        List<Malware> list = getAllMalwares();
        return list.size();
    }
}
